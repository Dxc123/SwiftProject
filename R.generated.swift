//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `endVoice.wav`.
    static let endVoiceWav = Rswift.FileResource(bundle: R.hostingBundle, name: "endVoice", pathExtension: "wav")

    /// `bundle.url(forResource: "endVoice", withExtension: "wav")`
    static func endVoiceWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.endVoiceWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 36 images.
  struct image {
    /// Image `add_friends_banner`.
    static let add_friends_banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_friends_banner")
    /// Image `ico_qq`.
    static let ico_qq = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_qq")
    /// Image `ico_record`.
    static let ico_record = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_record")
    /// Image `ico_wechat`.
    static let ico_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_wechat")
    /// Image `icon_opinionsFalse`.
    static let icon_opinionsFalse = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_opinionsFalse")
    /// Image `icon_opinionsTrue`.
    static let icon_opinionsTrue = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_opinionsTrue")
    /// Image `image1`.
    static let image1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image1")
    /// Image `image2`.
    static let image2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image2")
    /// Image `image3`.
    static let image3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image3")
    /// Image `login_pic01`.
    static let login_pic01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_pic01")
    /// Image `my_banner`.
    static let my_banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_banner")
    /// Image `nav_back_black`.
    static let nav_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_back_black")
    /// Image `nav_back_white`.
    static let nav_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_back_white")
    /// Image `nav_bg`.
    static let nav_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_bg")
    /// Image `nav_reload`.
    static let nav_reload = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_reload")
    /// Image `nav_search`.
    static let nav_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_search")
    /// Image `network_404`.
    static let network_404 = Rswift.ImageResource(bundle: R.hostingBundle, name: "network_404")
    /// Image `nodata`.
    static let nodata = Rswift.ImageResource(bundle: R.hostingBundle, name: "nodata")
    /// Image `normal_placeholder_h`.
    static let normal_placeholder_h = Rswift.ImageResource(bundle: R.hostingBundle, name: "normal_placeholder_h")
    /// Image `normal_placeholder_v`.
    static let normal_placeholder_v = Rswift.ImageResource(bundle: R.hostingBundle, name: "normal_placeholder_v")
    /// Image `refresh_discover`.
    static let refresh_discover = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_discover")
    /// Image `refresh_kiss`.
    static let refresh_kiss = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_kiss")
    /// Image `refresh_loading_1`.
    static let refresh_loading_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_loading_1")
    /// Image `refresh_loading_2`.
    static let refresh_loading_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_loading_2")
    /// Image `refresh_loading_3`.
    static let refresh_loading_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_loading_3")
    /// Image `refresh_normal`.
    static let refresh_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_normal")
    /// Image `refresh_will_refresh`.
    static let refresh_will_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh_will_refresh")
    /// Image `tab_book_S`.
    static let tab_book_S = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_book_S")
    /// Image `tab_book`.
    static let tab_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_book")
    /// Image `tab_class_S`.
    static let tab_class_S = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_class_S")
    /// Image `tab_class`.
    static let tab_class = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_class")
    /// Image `tab_home_S`.
    static let tab_home_S = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home_S")
    /// Image `tab_home`.
    static let tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home")
    /// Image `tab_mine_S`.
    static let tab_mine_S = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_mine_S")
    /// Image `tab_mine`.
    static let tab_mine = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_mine")
    /// Image `table_view_empty`.
    static let table_view_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "table_view_empty")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_friends_banner", bundle: ..., traitCollection: ...)`
    static func add_friends_banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_friends_banner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_qq", bundle: ..., traitCollection: ...)`
    static func ico_qq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_qq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_record", bundle: ..., traitCollection: ...)`
    static func ico_record(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_record, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ico_wechat", bundle: ..., traitCollection: ...)`
    static func ico_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_wechat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_opinionsFalse", bundle: ..., traitCollection: ...)`
    static func icon_opinionsFalse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_opinionsFalse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_opinionsTrue", bundle: ..., traitCollection: ...)`
    static func icon_opinionsTrue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_opinionsTrue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image1", bundle: ..., traitCollection: ...)`
    static func image1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image2", bundle: ..., traitCollection: ...)`
    static func image2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image3", bundle: ..., traitCollection: ...)`
    static func image3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_pic01", bundle: ..., traitCollection: ...)`
    static func login_pic01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_pic01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my_banner", bundle: ..., traitCollection: ...)`
    static func my_banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_banner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_back_black", bundle: ..., traitCollection: ...)`
    static func nav_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_back_white", bundle: ..., traitCollection: ...)`
    static func nav_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_bg", bundle: ..., traitCollection: ...)`
    static func nav_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_reload", bundle: ..., traitCollection: ...)`
    static func nav_reload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_reload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_search", bundle: ..., traitCollection: ...)`
    static func nav_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "network_404", bundle: ..., traitCollection: ...)`
    static func network_404(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.network_404, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nodata", bundle: ..., traitCollection: ...)`
    static func nodata(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nodata, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "normal_placeholder_h", bundle: ..., traitCollection: ...)`
    static func normal_placeholder_h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.normal_placeholder_h, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "normal_placeholder_v", bundle: ..., traitCollection: ...)`
    static func normal_placeholder_v(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.normal_placeholder_v, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_discover", bundle: ..., traitCollection: ...)`
    static func refresh_discover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_discover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_kiss", bundle: ..., traitCollection: ...)`
    static func refresh_kiss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_kiss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_loading_1", bundle: ..., traitCollection: ...)`
    static func refresh_loading_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_loading_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_loading_2", bundle: ..., traitCollection: ...)`
    static func refresh_loading_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_loading_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_loading_3", bundle: ..., traitCollection: ...)`
    static func refresh_loading_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_loading_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_normal", bundle: ..., traitCollection: ...)`
    static func refresh_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh_will_refresh", bundle: ..., traitCollection: ...)`
    static func refresh_will_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_will_refresh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_book", bundle: ..., traitCollection: ...)`
    static func tab_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_book_S", bundle: ..., traitCollection: ...)`
    static func tab_book_S(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_book_S, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_class", bundle: ..., traitCollection: ...)`
    static func tab_class(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_class, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_class_S", bundle: ..., traitCollection: ...)`
    static func tab_class_S(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_class_S, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home", bundle: ..., traitCollection: ...)`
    static func tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home_S", bundle: ..., traitCollection: ...)`
    static func tab_home_S(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home_S, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_mine", bundle: ..., traitCollection: ...)`
    static func tab_mine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_mine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_mine_S", bundle: ..., traitCollection: ...)`
    static func tab_mine_S(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_mine_S, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table_view_empty", bundle: ..., traitCollection: ...)`
    static func table_view_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table_view_empty, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 3 localization keys.
    struct infoPlist {
      /// en translation: Chinese
      ///
      /// Locales: en, zh-Hans, tr, ar, id, hi
      static let languageChinese = Rswift.StringResource(key: "language.Chinese", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "tr", "ar", "id", "hi"], comment: nil)
      /// en translation: SwiftProject
      ///
      /// Locales: en, zh-Hans, tr, ar, id, hi
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "tr", "ar", "id", "hi"], comment: nil)
      /// en translation: welcome
      ///
      /// Locales: en, zh-Hans, tr, ar, id, hi
      static let welcomeMessage = Rswift.StringResource(key: "welcomeMessage", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "tr", "ar", "id", "hi"], comment: nil)

      /// en translation: Chinese
      ///
      /// Locales: en, zh-Hans, tr, ar, id, hi
      static func languageChinese(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("language.Chinese", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "language.Chinese"
        }

        return NSLocalizedString("language.Chinese", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: SwiftProject
      ///
      /// Locales: en, zh-Hans, tr, ar, id, hi
      static func cfBundleDisplayName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "CFBundleDisplayName"
        }

        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: welcome
      ///
      /// Locales: en, zh-Hans, tr, ar, id, hi
      static func welcomeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcomeMessage", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "welcomeMessage"
        }

        return NSLocalizedString("welcomeMessage", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
